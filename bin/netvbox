#!/usr/bin/env ruby

require 'netvbox/vm_set_config'
require 'netvbox/vm_set_manager'
require 'netvbox/version'

NETVBOX_HOME = "#{ENV['HOME']}/.netvbox"

def print_help
  puts "NetVbox version #{NetVbox::VERSION}"
  puts "Config path: #{NETVBOX_HOME}"
  puts 'sub-commands:'
  puts '    add [ssh host] [username] [password] [vm name] [snapshot name]'
  puts '        adds a vm to manage'
  puts '    list'
  puts '        lists vms under management'
  puts '    load'
  puts '        loads vm snapshots'
  puts '    poweroff'
  puts '        powers off all vms'
  puts '    remove [ssh host] [username] [vm name] [snapshot name]'
  puts '        removes a vm from management'
  puts '    status'
  puts '         shows status of vms'
  puts 'vm set sub-commands:'
  puts '    createset [vm set]'
  puts '         creates a vm set with the specified name'
  puts '    currentset'
  puts '         shows the current vm set in use'
  puts '    removeset [vm set]'
  puts '         removes the vm set with the specified name'
  puts '    usedefaultset'
  puts '         uses the default vm set'
  puts '    useset'
  puts '         uses the vm set with the specified name'
end

def expect_args(num_expected_args)
  if ARGV.length == num_expected_args
    yield ARGV
  else
    puts 'Wrong number of arguments'
    print_help
  end
end

def parse_args
  command = ARGV[0]
  vm_set_manager = NetVbox::VmSetManager.new(NETVBOX_HOME)
  vm_set = vm_set_manager.current_set
  case command
  when 'add'
    expect_args(6) do
      hostname, username, password, vm_name, snapshot_name = ARGV[1..5]
      vm_set.add_vm(hostname, username, password, vm_name, snapshot_name)
    end
  when 'list'
    vm_set.list_vms
  when 'load'
    vm_set.load_snapshots
  when 'poweroff'
    vm_set.poweroff_all
  when 'remove'
    expect_args(5) do
      hostname, username, vm_name, snapshot_name = ARGV[1..4]
      vm_set.remove_vm(hostname, username, vm_name, snapshot_name)
    end
  when 'status'
    vm_set.print_status
  when 'createset'
    expect_args(2) {vm_set_manager.create_set ARGV[1]}
  when 'currentset'
    puts vm_set_manager.current_set_name
  when 'listsets'
    vm_set_manager.vm_set_names.each {|vm_set_name| puts vm_set_name}
  when 'removeset'
    expect_args(2) {vm_set_manager.remove_set ARGV[1]}
  when 'usedefaultset'
    vm_set_manager.use_default_set
  when 'useset'
    expect_args(2) {vm_set_manager.use_set ARGV[1]}
  else
    puts "Unknown command: #{command}"
    print_help
  end
end

if ARGV.empty?
  print_help
else
  parse_args
end
